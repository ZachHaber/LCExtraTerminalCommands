<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <ProjectGuid>{737E14D8-0F77-4DFF-97B0-44149D33BBCC}</ProjectGuid>
    <OutputType>Library</OutputType>
    <TargetFramework>netstandard2.1</TargetFramework>

    <RootNamespace>ExtraTerminalCommands</RootNamespace>
    <AssemblyName>ZachHaber.ExtraTerminalCommands</AssemblyName>
    <Product>Extra Terminal Commands</Product>
    <OutputVersion>1.6.2</OutputVersion>
    <Version>$(OutputVersion)</Version>
    <Description></Description>

    <ThunderstoreId>ZachHaber-ExtraTerminalCommands</ThunderstoreId>

    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>

    <!-- Number of instances of the game to start to test the plugin -->
    <NumberOfClients>1</NumberOfClients>
    <!-- Delay between each start of the game in seconds -->
    <DelayBetweenClientsInSeconds>5</DelayBetweenClientsInSeconds>
    <!-- To apply the correct delay between each instance, we need to add 1 to the delay because the first "echo" sent by the ping command is instant -->
    <PingDelay>$([MSBuild]::Add($(DelayBetweenClientsInSeconds), 1))</PingDelay>
    <!-- True to start the game when the plugin is built, false to only copy the plugin to the game's plugin directory -->
    <StartGame>true</StartGame>
    <Configurations>Debug;Release;StartGame</Configurations>
  </PropertyGroup>

  <!-- development dependencies -->
  <ItemGroup>
    <!--<PackageReference Include="BepInEx.AssemblyPublicizer.MSBuild" Version="0.4.1" PrivateAssets="all" />-->
    <PackageReference Include="BepInEx.PluginInfoProps" Version="2.1.0" PrivateAssets="all" />
  </ItemGroup>

  <!-- reference dependencies (common) -->
  <ItemGroup>
    <PackageReference Include="BepInEx.Core" Version="5.4.21" PrivateAssets="all" />
    <PackageReference Include="UnityEngine.Modules" Version="2022.3.9" PrivateAssets="all" />
    <PackageReference Include="NotAtomicBomb.TerminalApi" Version="1.5.4" PrivateAssets="all" />
  </ItemGroup>

  <!-- reference dependencies (local) -->
  <ItemGroup Condition="$(CI) != 'true'">
    <Reference Include="Assembly-CSharp" Publicize="true">
      <HintPath>$(LethalCompanyDir)Lethal Company_Data/Managed/Assembly-CSharp.dll</HintPath>
    </Reference>
    <Reference Include="Unity.Netcode.Runtime">
      <HintPath>$(LethalCompanyDir)Lethal Company_Data/Managed/Unity.Netcode.Runtime.dll</HintPath>
    </Reference>
    <Reference Include="Unity.TextMeshPro">
      <HintPath>$(LethalCompanyDir)Lethal Company_Data/Managed/Unity.TextMeshPro.dll</HintPath>
    </Reference>
  </ItemGroup>

  <!-- reference dependencies (CI) -->
  <ItemGroup Condition="$(CI) == 'true'">
    <PackageReference Include="LethalCompany.GameLibs.Steam" Version="50.0.1-ngd.0" PrivateAssets="all" />
  </ItemGroup>

  <Target Name="NetcodePatch" AfterTargets="PostBuildEvent">
    <Exec Command="dotnet netcode-patch &quot;$(TargetPath)&quot; @(ReferencePathWithRefAssemblies->'&quot;%(Identity)&quot;', ' ')" />
  </Target>

  <!-- prevent referenced assemblies from being copied to the output folder -->
  <Target Name="ClearReferenceCopyLocalPaths" AfterTargets="ResolveAssemblyReferences">
    <ItemGroup>
      <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" />
    </ItemGroup>
  </Target>

  <Target Name="PackThunderstore" DependsOnTargets="NetcodePatch" AfterTargets="PostBuildEvent" Condition="$(Configuration) == 'Release'">
    <MakeDir Directories="$(ProjectDir)assets/bundles" Condition="!Exists('$(ProjectDir)assets/bundles')" />
    <Exec Command="dotnet tcli build --config-path $(ProjectDir)assets/thunderstore.toml --package-version $(OutputVersion)" />
  </Target>

  <Target Name="ThunderstorePublish" AfterTargets="PackThunderstore" Condition="$(Configuration) == 'Release'">
    <Exec Command="dotnet tcli publish --config-path $(ProjectDir)assets\thunderstore.toml --file $(ProjectDir)dist\$(ThunderstoreId)-$(OutputVersion).zip" />
  </Target>

  <!-- Move the plugin to the game's plugin directory and start the game to test it -->
  <Target Condition="'$(CI)' != 'true' And $(StartGame) AND $(Configuration)!= 'Release'" Name="StartGame" AfterTargets="PostBuildEvent">
    <!-- Create a temporary copy of the plugin in the target directory -->
    <!-- This is a workaround because if we copy it directly to the game's plugin directory, an error is thrown because the game is using the plugin -->
    <Copy SourceFiles="$(TargetDir)$(TargetFileName)" DestinationFiles="$(TargetDir)$(TargetFileName).tmp" />
    <!-- Move the plugin temporary copy to the game's plugin directory -->
    <!-- The move command will overwrite the plugin if it already exists and no error will be thrown -->
    <!-- We can't move the original plugin because it is used by reference for Test project -->
    <Move SourceFiles="$(TargetDir)$(TargetFileName).tmp" DestinationFiles="$(PluginGameDir)$(TargetFileName)" />
    <!-- Copy over the asset file so the game will launch!-->
    <Copy SourceFiles="$(ProjectDir)assets\bundles\$(AssetFileName)" DestinationFolder="$(PluginGameDir)" />
    <!-- Kill every instance of the game, ignore errors if none are running -->
    <!--<Exec Command="taskkill /F /IM &quot;$(GameExe)&quot; /T || exit 0" />-->
    <!-- Start new instances of the game as many times as specified in NumberOfClients -->
    <!-- The ping command is used to apply a delay between each instance, otherwise only one BepInEx debug terminal would be opened -->
    <!-- Use ping command is a workaround because Windows doesn't have a sleep command -->
    <Message Importance="high" Text="Plugin Game Dir: $(PluginGameDir)" />
    <Message Importance="high" Text="GameArgs: $(GameArgs)" />
    <Message Importance="high" Text="for /L %%i in (1,1,$(NumberOfClients)) do (start &quot;&quot; &quot;$(GameExePath)&quot; $(GameArgs) &amp; if %%i lss $(NumberOfClients) (ping 127.0.0.1 -n $(PingDelay) &gt; nul))" />
    <Exec Command="for /L %%i in (1,1,$(NumberOfClients)) do (start &quot;&quot; &quot;$(GameExePath)&quot; $(GameArgs) &amp; if %%i lss $(NumberOfClients) (ping 127.0.0.1 -n $(PingDelay) &gt; nul))" />
  </Target>
</Project>
